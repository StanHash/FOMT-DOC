
LINEAR RULES:
	push8 A;              <=> push A
	push16 A;             <=> push A
	push32 A;             <=> push A
	pushm A;              <=> push [A]

	push A; pop           <=> A;

	push A; push B; equ;    <=> push [A] = B;
	push A; push B; addequ; <=> push [A] += B;
	push A; push B; subequ; <=> push [A] += B;
	push A; push B; mulequ; <=> push [A] *= B;
	push A; push B; divequ; <=> push [A] /= B;
	push A; push B; modequ; <=> push [A] %= B;

	push A; push B; add;  <=> push (A + B);
	push A; push B; sub;  <=> push (A - B);
	push A; push B; mul;  <=> push (A * B);
	push A; push B; div;  <=> push (A / B);
	push A; push B; mod;  <=> push (A % B);

	push A; push B; land; <=> push (A && B);
	push A; push B; lorr; <=> push (A || B);

	push A; bne B; <=> goto B if A
	push A; beq B; <=> goto B if !A

	push A; push B; cmp; beq C; <=> goto C if (A == B)

	~push A; inc           <=> push (A + 1)~
	~push A; dec           <=> push (A - 1)~
	push A; neg           <=> push (-A)
	push A; not           <=> push (!A)

	push A; bi;        <=> goto A

EX:
	=> push8 1; push8 0x36; pushm 0;  add; equ; pop; <-- raw instructions
	=> push 1;  push  0x36; push [0]; add; equ; pop; <-- push simplifications
	=> push 1;  push 0x36 + [0];           equ; pop; <-- [push A|push B|add] to push (A + B)
	=> push [1] = 0x36 + [0];                   pop; <-- [push A|push B|equ] to push ([A] = B)
	=> [1] = 0x36 + [0];                             <-- [push A|pop] to naked A

FLOW RULES:
	0: push A; beq; -> 1, 2
	1: {...} -> end
	2: {...} -> end
	<=>
	if A then {1} else {2}
