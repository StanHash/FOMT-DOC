Addresses are MFOMTU

Warning: not very pretty notes.

FACING/DIRECTION VALUES:
    00 = FACING_DOWN
    01 = FACING_UP
    02 = FACING_LEFT
    03 = FACING_RIGHT

ENTITY(?) INHERITANCE TREE (I might have missed some):
- AbstractEntity (080EE790) | pure
    - AbstractActor (080EEDB8) | pure
        - vtable_80EEA94 | pure
            - vtable_80EEA08
            - vtable_80EE968
            - vtable_80EE8DC
            - vtable_80EE850
            - vtable_80EE7C4
            - vtable_80EFA1C
        - AbstractPlayerActor (080EECAC) | pure
            - PlayerActor (080EEB98)
        - vtable_80EEC5C | pure
            - vtable_80EEB34
        - vtable_80EED68
        - vtable_80EEE08
        - ScheduledActor (080EF718) | pure
            - vtable_80EF6D8
            - vtable_80EF698
            - PopuriActor (080EF658)
            - vtable_80EF618
            - vtable_80EF5D8
            - vtable_80EF598
            - vtable_80EF558
            - vtable_80EF518
            - vtable_80EF4D8
            - vtable_80EF498
            - vtable_80EF458
            - vtable_80EF418
            - vtable_80EF3D8
            - vtable_80EF398
            - vtable_80EF358
            - vtable_80EF318
            - vtable_80EF2D8
            - vtable_80EF298
            - vtable_80EF258
            - vtable_80EF218
            - vtable_80EF1D8
            - vtable_80EF198
            - vtable_80EF158
            - vtable_80EF118
            - vtable_80EF0D8
            - vtable_80EF058
            - vtable_80EF018
            - vtable_80EEFD8
            - vtable_80EEF98
            - vtable_80EEF58
            - vtable_80EEF18
            - vtable_80EEED8
            - vtable_80EEE98
            - vtable_80EEE58
        - vtable_80EF868 | pure
            - vtable_80EF824
            - vtable_80EF7E0
            - vtable_80EF79C
            - vtable_80EF758
        - vtable_80F0954
    - vtable_80EF984
    - vtable_80EF93C
    - vtable_80EF8F4
    - vtable_80EF8C0
    - vtable_80EFAA8

OTHER THING INHERITANCE TREE:
- vtable_80F0990 (vtable_80EE6E0??) | pure
    - vtable_80F0894

I AM CONFUSING MYSELF A BIT TOO MUCH INHERITANCE TREE??:
- vtable_80EE578
    - vtable_80EE404

AbstractEntity struct layout (size: $18):
    +00 | word  | pointer to Game object
    +04 | short | current map/location id of the entity?
        id 000 is mother's hill
        id 001 is beach
        id 002 is farm
        id 003 is forest
        id 004 is church rear
        id 005 is north mineral town
        id 006 is rose square
        id 007 is south mineral town
        id 008 is mother's hill peak
        id 01D is player's house
        id 03A is spring mine
    +06 | byte  | ? is doing something special bool?
    +08 | word  | x position (Q16?)
    +0C | word  | y position (Q16?)
    +10 | word  | some object pointer (has vtable at +04) (related to display! has inline SpriteAnimator at +30)
    +14 | word  | vtable (080EE790)

AbstractActor struct layout:
    +00 | AbstractEntity (vtable: 080EEDB8)
    +18 | word  | x speed? (Q16)
    +1C | word  | y speed? (Q16)
    +20 | byte  | anim identifier offset? DIRECTION?
    +21 | byte  | ? (set to arg r3 of constructor (08032498), both PlayerActor and ScriptedActor constructors give 2)
    +22 | short | anim identifier base?
    +24 | short | animation duration?
    +26 | short | animation duration?
    +28 | some object (constructor: 80326BC (lol))

PlayerActor struct layout (size: $C8):
    +00 | Abstract(Player)Actor (vtable: 080EEB98)
    +34 | word | some object pointer, seems big and important
    +38 | word | GameData pointer
    +3C | byte | state identifier? (getDesiredAnimId (0802D42C) and 0802F3CC have big switches on this value)
        State 0 you move around normally (including when holding something)
        State 1 when holding A
        State 2 when holding B
        State 6 when sleeping because of idle time
        State 9 when in tool usage animation?
        State D when dropping something?
        State 11 when lifting something?
        State 2C when jumping over a thing on the map
        State 35 when blacked out between days? state entered by the state 0 update method when the player finds itself colliding with stuff?
        State 7 and 2D have the player's (collision?) box be bigger ({ x-7, y-9, x+7, y+5 } instead of AbstractActor default)
    +3D | byte | ?
    +3E | byte | ?
    +3F | byte | ?
    +40 | byte | ?
    +60 | some object
        +00 | word  | some cstring pointer
        +04 | short | ?
    +7A | byte  | ? set to 0 at the start of the state 0 update method
    +7C | short | ?
    +88 | 
    +A4 | byte  | ?
    +A6 | short |Â ? set to 0 by the state 0 update method when switching to state 35 via collision
    +B3 | byte  | ? something that counts down in 0802D0A0
    +B4 | byte  | ? 
    +C0 | byte  | ? set to 0 at the start of the state 0 update method
    +C1 | byte  | ? sometimes set to 1 when state changes
    +C3 | byte  | next state identifier? state 0 update method will set state to this if non-zero
    +C4 | byte  | animation counter?
    +C5 | byte  | ? seems to be something counting down. 0802F3CC does thing on this
    +C6 | byte  | ?

Game Object struct layout (constructed by 08017740):
    +0000 | vtable
    +0004 | some (important) inline object (constructed by 080B18C0, called by two constructors)
        +0000 | word      | pointer to some object (collision related?)
            +00 | word | some location id maybe?
            +04 | word | some map id
        +0004 | word[$64] | array of pointer to entities
            Entity 00 is Player
            Entity 03 is Popuri
            Entity 09 may be Manna
            Entity 0E may be Harris
            Entity 14 may be Doctor
            Entity 19 may be Ann
            Entity 1B may be Gotz
        +0194 | word      | ?
        +0198 | ??
        +0238 | array of $15 ($16? that wouldn't make much sense) objects (size: $84)
            +00 | byte      | ?
            +01 | byte      | ?
            +02 | byte      | ?
            +03 | byte      | ?
            +04 | byte[$80] | ????
        +0D10 | array of $C ($D?) objects (size: $0C)
            +00 | PaletteSlotHolder
            +08 | byte | palette id
            +09 | byte | ?
            +0A | byte | ?
        +0DAC | byte | ?
        +0DAD | byte | ?
        +0DB0 | DefinedSprite (08522C48, map actors)
        +0DE0 | DefinedSprite (08607DDC, item icons)
        +0E10 | DefinedSprite (086C491C, tv programs (I think))
        +0E40 | DefinedSprite (086A049C, ?)
        +0E70 | DefinedSprite (086C2F38, emote bubbles (I think))
        +0EA0 | DefinedSprite (086C47F0, some small circle?)
        +0ED0 | DefinedSprite (086C46C8, ?)
        +0F00 | DefinedSprite (0860759C, ?)
        +0F30 | DefinedSprite (086CD490, some big circle?)
        +0F60 | DefinedSprite (086CC6E8, the moon?)
        +0F90 | DefinedSprite (086CCD84, ?)
        +0FC0 | DefinedSprite (086CB7BC, clouds?)
        +0FF0 | DefinedSprite (086989C8, ?)
        +1020 | word | ?
        +1024 | word | ?
        +1028 | word | ?
    +1038 | word | pointer to argument r1 of constructor (saved game state?) (this is the same object pointed at PlayerActor+34)
        +0008 | some object
            +08 | some object capable of knowing the season (maybe the entire date/datetime?)
                +08bit | 2bit | season identifier?
                +10bit | 5bit | day?
                +16bit | 5bit | hours
                +21bit | 6bit | minutes; advances by 1 every 25 frames?
        +0047 | ???? a value (bits) (check 0800E9E0)
        +01F4 | some object capable of knowing the player's house level/size
            +00bit | 2bit | house size identifier
        +0420 | some object?
            +00bit | 1bit | ?
        +0600 | some object?
            +00bit | 1bit | ?
        +1D80 | popuri's data
        +224C | bool | ?
    +103C | byte | ?
    +1040 | some object
        +00 | word | pointer to [+1038]+10 (?)
        +04 | byte | ?
    +1048 | word | pointer to something
    +1050 | word | pointer to farm terrain data? (see 0801A214)
    +1054 | word | pointer to some object
    +1074 | word | ?
    +107C | word | ?

AbstractEntity vtable layout:
    +08 | ~AbstractEntity();
    +0C | struct { short left, top, right, bottom; } unk(); (default: returns { x, y, x, y })
    +10 | ??
    +14 | ??
    +18 | void unk(); (default: calls [object at +10 vtable]+0C) (this seems important, maybe update?)
    +1C | void unk(int unk); (default: calls [object at +10 vtable]+10 with argument)
    +20 | void unk(); (default: sets byte at +06 to 1)
    +24 | void unk(); (default: sets byte at +06 to 0)
    +28 | int  unk(); (default: gets byte at +06)
    +2C | void unk(); (default: calls [object at +10 vtable]+0C)
    +30 | ?? (default: purefunc) (probably makes the graphical object for this entity)

AbstractActor vtable (080EEDB8) layout:
    +00 | AbstractEntity vtable
        +0C default: returns { x-7, y-4, x+7, y+5 }
    +34 | int  unk(); (default: returns 0)
    +38 | void unk(??); (default: nullsub)

vtable_80EEA94 vtable layout:
    +00 | AbstractActor vtable
        +0C default: returns { x-7, y-9, x+7, y+5 }
    +3C | void unk(??); (default: nullsub)
    +40 | void unk(??); (default: nullsub)
    +44 | int  unk(??); (default: returns 0)
    +48 | int  unk(??); (default: returns 0)
    +4C | int  unk(??); (default: returns 0)
    +50 | int  unk(??); (default: returns 0)
    +54 | int  unk(??); (default: returns 0)
    +58 | int  unk(??); (default: returns 0)
    +5C | int  unk(??); (default: returns 0)
    +60 | int  unk(??); (default: returns 0)
    +64 | void unk(??); (default: nullsub)
    +68 | void unk(??); (default: nullsub)
    +6C | void unk(??); (default: nullsub)
    +70 | void unk(??); (default: nullsub)
    +74 | int  unk(??); (default: returns 5)
    +78 | int  unk(??); (default: returns 5)
    +7C | void unk(??); (default: nullsub)
    +80 | void unk(??); (default: nullsub)
    +84 | void unk(int facing, int unk); (default: nullsub, called at 0802D2A6)
    +88 | ?? (default: purefunc)

AbstractPlayerActor vtable layout:
    +00 | AbstractActor vtable
    +40 | bool unk(void);
    +64 | void modifyStaminaFatigue(int stamina, int fatigue); (adds to the respective fields)
    +6C | void unk(void); (sets +A4 and +88 to 0, sets anim to 192 (standing))

Game Object vtable layout:
    +08  | <destructor>
    +2C  | int getLocationPxWidth(int location);
    +30  | int getLocationPxHeight(int location);
    +34  | struct { void* unk; void* unk; short width, height; } getLocationTerrain(int location); (does lots of things but in the end gets { mapData.unk18, mapData.unk1C, mapData.width, mapData.height })
    +38  | void makeActorMaybe(int identifier);
    +40  | AbstractActor* getActor(int identifier); (maybe)
    +64  | AbstractSprite* getItemSprite(void);
    +68  | AbstractSprite* getMapActorSprite(void);
    +120 | bool unk(EntityLocation*);
    +144 | Unk* getUnk(void); (gets [+1038]+08)
    +14C | Unk* getUnk(void); (gets [[+1054]+04]+D0, MusicPlayer related)

080350C0 | ScriptedActor ScriptedActor_construct(GameObject*, CharacterData*, GameData*, ActorScript*, int unk, int unk, int unk)
ScriptedActor has vtable_80EF718

EntityLocation struct layout (given to AbstractEntity constructor as arg r2):
    +000bit | 10bit | location identifier
    +010bit | 16bit | x pixel position
    +026bit | 16bit | y pixel position

ActorLocation struct layout:
    +00 | EntityLocation
    +06 | byte | facing

CharacterData struct layout:
    +000bit | ActorLocation
    +096bit | 5bit  | ?
    +101bit | 5bit  | ?
    +106bit | 5bit  | ?
    +111bit | 10bit | ?
    +144bit | short | animation id (if $FFFF, ScriptedActor constructor will take argument 5 ([sp+04]))

ScheduledActor struct layout:
    +00 | AbstractActor
    +30 | word  | pointer to character data (name tbd)
    +34 | word  | pointer to game data (name tbd)
    +38 | word  | pointer to actor script
    +3C | byte  | current schedule identifier? (default: CharacterData+096bit)
    +3D | byte  | running schedule entry id (-1?)? (default: CharacterData+101bit)
    +3E | byte  | running script entry id? (default: CharacterData+106bit)
    +3F | byte  | ?
    +40 | short | time since last script point (in frames?)? (default: CharacterData+111bit)
    +42 | short | ? (default: arg 7 ([sp+0C]) of constructor)
    +44 | short | some animation id? (default: arg 5 ([sp+04]) of constructor)
    +46 | short | some animation id? (default; arg 6 ([sp+08]) of constructor)

ScheduledActor vtable layout:
    +00 | AbstractActor vtable
    +3C | void unk(int unk); (schedule update?)

ActorScript:
    +00 | word  | function pointer of signature int(*)(GameData*);
    +04 | word? | ?
    +08 | word  | pointer to an array of pointers to schedules (indexed by [ScriptedActor+3C])

ActorSchedule:
    +00 | short | size of ScheduleEntry array
    +04 | word  | pointer to ScheduleEntry array

ScheduleEntry:
    +00 | short | time in minutes starting from 6:00 AM (hour*60 + minute)
    +04 | word  | pointer to script header

ScriptHeader:
    +00 | word  | pointer to point array
    +04 | short | size of point array
    +06 | short | initial x position
    +08 | short | initial y position
    +0A | byte  | ?
    +0B | byte  | a bunch of things (see 080353CE)

ScriptPoint:
    +00 | short | ? something timing related
    +02 | short | new coord
    +04 | byte  | if non-zero then +02 is a y coord point else x
