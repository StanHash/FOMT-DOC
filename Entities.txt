Addresses are MFOMTU

Warning: not very pretty notes.

FACING/DIRECTION VALUES:
    00 = FACING_DOWN
    01 = FACING_UP
    02 = FACING_LEFT
    03 = FACING_RIGHT

ENTITY(?) INHERITANCE TREE (I might have missed some):
- AbstractEntity (080EE790) | pure
    - AbstractActor (080EEDB8) | pure
        - vtable_80EEA94 | pure
            - vtable_80EEA08
            - vtable_80EE968
            - vtable_80EE8DC
            - vtable_80EE850
            - vtable_80EE7C4
            - vtable_80EFA1C
        - AbstractPlayerActor (080EECAC) | pure
            - PlayerActor (080EEB98)
        - vtable_80EEC5C | pure
            - vtable_80EEB34
        - vtable_80EED68
        - vtable_80EEE08
        - vtable_80EF718 | pure
            - vtable_80EF6D8
            - vtable_80EF698
            - vtable_80EF658
            - vtable_80EF618
            - vtable_80EF5D8
            - vtable_80EF598
            - vtable_80EF558
            - vtable_80EF518
            - vtable_80EF4D8
            - vtable_80EF498
            - vtable_80EF458
            - vtable_80EF418
            - vtable_80EF3D8
            - vtable_80EF398
            - vtable_80EF358
            - vtable_80EF318
            - vtable_80EF2D8
            - vtable_80EF298
            - vtable_80EF258
            - vtable_80EF218
            - vtable_80EF1D8
            - vtable_80EF198
            - vtable_80EF158
            - vtable_80EF118
            - vtable_80EF0D8
            - vtable_80EF058
            - vtable_80EF018
            - vtable_80EEFD8
            - vtable_80EEF98
            - vtable_80EEF58
            - vtable_80EEF18
            - vtable_80EEED8
            - vtable_80EEE98
            - vtable_80EEE58
        - vtable_80EF868 | pure
            - vtable_80EF824
            - vtable_80EF7E0
            - vtable_80EF79C
            - vtable_80EF758
        - vtable_80F0954
    - vtable_80EF984
    - vtable_80EF93C
    - vtable_80EF8F4
    - vtable_80EF8C0
    - vtable_80EFAA8

OTHER THING INHERITANCE TREE:
- vtable_80F0990 (vtable_80EE6E0??) | pure
    - vtable_80F0894

I AM CONFUSING MYSELF A BIT TOO MUCH INHERITANCE TREE??:
- vtable_80EE578
    - vtable_80EE404

AbstractEntity struct layout (size: $18):
    +00 | word   | some object pointer (has vtable at +00)
    +04 | ?      | ?
    +06 | ?      | ?
    +08 | word   | x position (Q16?)
    +0C | word   | y position (Q16?)
    +10 | word   | some object pointer (has vtable at +04) (related to display! has inline SpriteAnimator at +30)
    +14 | word   | vtable (080EE790)

AbstractActor struct layout:
    +00 | AbstractEntity (vtable: 080EEDB8)
    +18 | word  | x speed? (Q16)
    +1C | word  | y speed? (Q16)
    +20 | byte  | anim identifier offset? DIRECTION?
    +21 | byte  | ?
    +22 | short | anim identifier base?
    +24 | short | animation duration?
    +26 | short | animation duration?
    +28 | some object (constructor: 80326BC (lol))

PlayerActor struct layout (size: $C8):
    +00 | Abstract(Player)Actor (vtable: 080EEB98)
    +34 | word | some object pointer, seems big and important
    +38 | word | some object pointer
    +3C | byte | ? (maybe some state identifier? getDesiredAnimId (0802D42C) has big switch on this value)
        State 0 you move around normally (including when holding something)
        State 1 when holding A
        State 2 when holding B
        State 6 when sleeping because of idle time
        State D when dropping something?
        State 11 when lifting something?
        State 2C when jumping over a thing on the map
        State 35 when blacked out?
        State 7 and 2D have the player's (collision?) box be bigger ({ x-7, y-9, x+7, y+5 } instead of AbstractActor default)
    +3D | byte | ?
    +3E | byte | ?
    +3F | byte | ?
    +40 | byte | ?
    +60 | some object
        +00 | word  | some cstring pointer
        +04 | short | ?
    +7C | short | ?
    +B3 | byte  | ?
    +C6 | byte  | ?

Big Object of which the pointer is at AbstractEntity+00 struct layout (constructed by 08017740):
    +0000 | vtable
    +0004 | some (important) inline object (constructed by 080B18C0, called by two constructors)
        +0000 | word      | pointer to some object (collision related?)
            +00 | word | 
        +0004 | word[$64] | array of pointer to entities
        +0194 | word      | ?
        +0198 | ??
        +0238 | array of $15 ($16? that wouldn't make much sense) objects (size: $84)
            +00 | byte      | ?
            +01 | byte      | ?
            +02 | byte      | ?
            +03 | byte      | ?
            +04 | byte[$80] | ????
        +0D10 | array of $C ($D?) objects (size: $0C)
            +00 | PaletteSlotHolder
            +08 | byte | palette id
            +09 | byte | ?
            +0A | byte | ?
        +0DAC | byte | ?
        +0DAD | byte | ?
        +0DB0 | DefinedSprite (08522C48, map actors)
        +0DE0 | DefinedSprite (08607DDC, item icons)
        +0E10 | DefinedSprite (086C491C, tv programs (I think))
        +0E40 | DefinedSprite (086A049C, ?)
        +0E70 | DefinedSprite (086C2F38, emote bubbles (I think))
        +0EA0 | DefinedSprite (086C47F0, some small circle?)
        +0ED0 | DefinedSprite (086C46C8, ?)
        +0F00 | DefinedSprite (0860759C, ?)
        +0F30 | DefinedSprite (086CD490, some big circle?)
        +0F60 | DefinedSprite (086CC6E8, the moon?)
        +0F90 | DefinedSprite (086CCD84, ?)
        +0FC0 | DefinedSprite (086CB7BC, clouds?)
        +0FF0 | DefinedSprite (086989C8, ?)
        +1020 | word | ?
        +1024 | word | ?
        +1028 | word | ?
    +1038 | word | pointer to argument r1 of constructor (?)
    +103C | byte | ?
    +1040 | some object
        +00 | word | pointer to [+1038]+10 (?)
        +04 | byte | ?
    +1048 | word | pointer to something
    +1050 | word | ?
    +1074 | word | ?
    +107C | word | ?

AbstractEntity vtable layout:
    +08 | ~AbstractEntity();
    +0C | struct { short left, top, right, bottom; } unk(); (default: returns { x, y, x, y })
    +10 | ??
    +14 | ??
    +18 | void unk(); (default: calls [object at +10 vtable]+0C) (this seems important, maybe update?)
    +1C | void unk(int unk); (default: calls [object at +10 vtable]+10 with argument)
    +20 | void unk(); (default: sets byte at +06 to 1)
    +24 | void unk(); (default: sets byte at +06 to 0)
    +28 | int  unk(); (default: gets byte at +06)
    +2C | void unk(); (default: calls [object at +10 vtable]+0C)
    +30 | ?? (default: purefunc)

AbstractActor vtable layout:
    +00 | AbstractEntity vtable
        +0C default: returns { x-7, y-4, x+7, y+5 }
    +34 | int unk(); (default: gets 0)
    +38 | ?? (default: nullsub)

AbstractPlayerActor vtable layout:
    +00 | AbstractActor vtable
    +40 | bool unk(void);
    +64 | void modifyStaminaFatigue(int stamina, int fatigue); (adds to the respective fields)

Big Object vtable layout:
    +08 | <destructor>
    +38 | void makeActorMaybe(int identifier);
    +64 | AbstractSprite* getItemSprite(void);
    +68 | AbstractSprite* getMapActorSprite(void);
