Addresses are MFOMTU

The game handles different screens and whatnot using "Scene" objects (I'm borrowing the terminology from my RPGMaker days). There's no "Scene Manager" objects or whatever tho. There's a main scene management function called by the main loop, but individual scenes can also just call up "sub"scenes and run those no problem (ex: the new game scene going through player name select scene, then farm name select scene, then dog name select scene, etc in a potential loop).

Running a scene implies a full run until it ends (not just a single frame or something like that).

Scenes are weird because there's like two kind of objects that look very similar and until recently I thought they both were the same Scene object but are actually unrelated (in terms of type inheritance).

AbstractScene struct layout:
    +00 | word | vtable (080EDF0C)

GameScene struct layout (this scene manages other scenes, as its run method calls doMainLoop):
    +000       | AbstractScene (vtable: 080EE138)
    +004       | word | GameData pointer
    +008       | some object (seems important)
        +000 | word        | ?
        +024 | byte[$190]? | ?
        +1B4 | word        | ?
        +34C | word        | vtable (080EFD50 -> 080EFD64)
        +350 | word        | GameData pointer
        +354 | word        | ?
        +358 | word        | ?
    +364       | byte | ?
    +368       | word | ? (default: $AB)
    +36C       | byte | ? (may be struct with next field)
    +370       | word | ? (default: $1D)
    +374+00bit | 5bit | ? (default: 6)
    +374+05bit | 6bit | ?
    +378       | word | ?
    +38C       | word | ?
    +4D0       | word | ?
    +4DC       | array of 6 objects (size: $C)
        +00+00bit | 2bit | ?
        +02       | EntityLocation? (default: loc=23A, x=0, y=0)
    +524       | array of 4 objects (size: $C)
        +00 | EntityLocation? (default: loc=23A, x=0, y=0)
        +06 | byte  | ?
        +08 | short | ?
        +0A | short | ?

I just discovered 080E06A4 and now I am scared

struct Scene    { virtual ~Scene();    virtual std::auto_ptr<NotScene> run(); };
struct NotScene { virtual ~NotScene(); virtual std::auto_ptr<Scene>    run(); };

void doMainLoop(std::auto_ptr<Scene> scene)
{
    // This function generates a lot of dead code

    while (scene.get())
    {
        // constructing from a temporary object, temporary's lifetime ends, destructor called
        std::auto_ptr<NotScene> notScene(scene->run());

        // need to check and free the currently held pointer
        scene.reset();

        if (!notScene.get())
            break;

        // operator = needs to check and free the currently held pointer
        // assigning from a temporary, temporary's lifetime ends, destructor called
        scene = notScene->run();

        // notScene goes out of scope, destructor called
    }

    // scene goes out of scope, destructor called
}
